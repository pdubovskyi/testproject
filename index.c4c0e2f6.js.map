{"mappings":"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","sources":["src/js/closeModal.js","src/js/api-service/filmoteka-api.js","src/js/main-page/slider-film.js","src/js/main-page/gallery.js"],"sourcesContent":["const refs = {\n    backdrop: document.querySelector('.backdrop'),\n    closeBtn: document.querySelector('[data-modal-close]'),\n}\n\nrefs.backdrop.addEventListener('click', onBackdropHandler);\nrefs.closeBtn.addEventListener('click', closeModal);\nwindow.addEventListener('keydown', closeModalEsc);\n// TODO: add listener on ESC when modal is opening\n\nfunction closeModal() {\n    refs.backdrop.classList.remove('is-open');\n    window.removeEventListener('keydown', closeModal);\n}\n\nfunction onBackdropHandler(e) {\n    if (e.target.classList.contains('backdrop')) {\n        closeModal();\n    }\n    return;\n}\n\nfunction closeModalEsc(e) {\n    if (e.code === 'Escape') closeModal();\n}\n\n\n","const API_KEY = '431ab85139813dba3796c445694ce723';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport default class FilmotekaApi {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  globalFetch(url) {\n    return fetch(url)\n      .then(response => response.json())\n      .then(date => {\n        this.incrementPage();\n        return date.results;\n      });\n  }\n  fetchGenres() {\n    const url = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        return data.genres;\n      });\n  }\n\n  fetchInTrendFilmWithGenres() {\n    return this.fetchTrendFilm().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids.map(id => genresList.filter(el => el.id === id)).flat(),\n        }));\n      });\n    });\n  }\n\n  fetchSearchFilmWithGenres() {\n    return this.fetchSearchFilm().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids.map(id => genresList.filter(el => el.id === id)).flat(),\n        }));\n      });\n    });\n  }\n\n  fetchTrendFilm() {\n    const url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=${this.page}`;\n    return this.globalFetch(url);\n  }\n\n  fetchSearchFilm() {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n    return this.globalFetch(url);\n  }\n\n  fetchInfoFilm() {\n    const movie_id = 1031653;\n    const url = ` https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n    return this.globalFetch(url);\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  decrementPage() {\n    this.page -= 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n  get pageNum() {\n    return this.page;\n  }\n  set pageNum(newPage) {\n    this.page = newPage;\n  }\n}\n","import FilmotekaApi from '../api-service/filmoteka-api';\n\nconst refs = {\n  sliderContainer: document.querySelector('.slide-track'),\n};\nconst filmotekaApi = new FilmotekaApi();\nrenderTrendy();\n\nexport function renderTrendy() {\n  filmotekaApi\n    .fetchTrendFilm()\n    .then(renderSliderFilms)\n    .catch(err => {\n      refs.sliderContainer.innerHTML = `<img class=\"catch-error-pagination\" src=\"${errorUrl}\" />`;\n    });\n}\n\nfunction renderSliderFilms(results) {\n  const markup = results\n    .map(result => {\n      return `\n    <div class=\"slider-element\">\n        <img class=\"slider-image\" src=\"https://image.tmdb.org/t/p/w500${result.poster_path}\" alt=\"${result.title} \"\n            data-id=\"${result.id}\"\n            onerror=\"this.onerror=null;this.src='https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-';\" />\n    </div>\n    `;\n    })\n    .join('');\n  refs.sliderContainer.insertAdjacentHTML('beforeend', markup);\n}\n","import FilmotekaApi from '../api-service/filmoteka-api';\n\n\n\n\nconst refs = {\n   containerList: document.querySelector('.js-card'),\n}\nconst filmotekaApi = new FilmotekaApi();\nrenderHomepage();\n\nexport function renderHomepage() {\n  filmotekaApi.fetchInTrendFilmWithGenres().then(appendResultsMarkup);\n  console.log(filmotekaApi.fetchInTrendFilmWithGenres())\n   \n}\n\nfunction appendResultsMarkup(results) {\n  \n    const markup = results.map(({poster_path, title, genres, release_date, id}) => {\n        return `<li class=\"card__item\">\n  \n        <div class=\"thumb\">\n            <img  src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"\"width=\"100%\" data-id=\"${id}\"\n         onerror=\"this.onerror=null;this.src='https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-';\" />\n       \n              \n        </div>  \n             <h2 class=\"card__title\">${title}</h2>\n             <p class=\"card__text\">\n            <span>${genres.map(obj => obj.name).join(' ')}</span> | <span>${release_date}</span>\n            </p>\n    </li>`\n    }).join('');\n    // console.log(markup);\n    refs.containerList.insertAdjacentHTML('beforeend', markup);\n \n}\n"],"names":["$0649b09f8ef56721$var$refs","backdrop","document","querySelector","closeBtn","$0649b09f8ef56721$var$closeModal","classList","remove","window","removeEventListener","addEventListener","e","target","contains","code","$380398118d2742cb$var$API_KEY","$380398118d2742cb$var$BASE_URL","$380398118d2742cb$export$2e2bcd8739ae039","globalFetch","url","fetch","then","response","json","date","this","incrementPage","results","fetchGenres","data","genres","fetchInTrendFilmWithGenres","fetchTrendFilm","genresList","map","movie","release_date","split","genre_ids","id","filter","el","flat","fetchSearchFilmWithGenres","fetchSearchFilm","page","searchQuery","fetchInfoFilm","decrementPage","resetPage","query","newQuery","pageNum","newPage","constructor","$39e3d4cad74cacb3$var$refs","sliderContainer","$39e3d4cad74cacb3$var$renderSliderFilms","markup","result","poster_path","title","join","insertAdjacentHTML","catch","err","innerHTML","errorUrl","$ba0d772e12a5a3d3$var$refs","containerList","$ba0d772e12a5a3d3$var$filmotekaApi","$ba0d772e12a5a3d3$var$appendResultsMarkup","obj","name","console","log"],"version":3,"file":"index.c4c0e2f6.js.map"}